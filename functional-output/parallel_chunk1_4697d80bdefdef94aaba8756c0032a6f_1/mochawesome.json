{
  "stats": {
    "suites": 5,
    "tests": 7,
    "passes": 3,
    "pending": 0,
    "failures": 4,
    "start": "2024-03-22T09:17:59.805Z",
    "end": "2024-03-22T09:18:08.915Z",
    "duration": 9110,
    "testsRegistered": 7,
    "passPercent": 42.857142857142854,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "18e3bebb-abb9-4ce3-a86e-d46cfeb3fc76",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "521e113a-fd7d-4c22-912d-ed272ce50a2e",
          "title": "Breathing Space functionality",
          "fullFile": "/Users/kiyreandyer-allen/Desktop/HMCTS/repos/cmc-ccd-e2e-tests/src/test/end-to-end/paths/BreathingSpace.js",
          "file": "/src/test/end-to-end/paths/BreathingSpace.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite in \"Breathing Space functionality\"",
              "fullTitle": "Breathing Space functionality \"before all\" hook: codeceptjs.beforeSuite in \"Breathing Space functionality\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "82d92d07-0531-41ae-8854-166def577855",
              "parentUUID": "521e113a-fd7d-4c22-912d-ed272ce50a2e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before in \"Breathing Space functionality\"",
              "fullTitle": "Breathing Space functionality \"before each\" hook: codeceptjs.before in \"Breathing Space functionality\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "2b531a53-55b7-4786-a334-5eaee04a4936",
              "parentUUID": "521e113a-fd7d-4c22-912d-ed272ce50a2e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before in \"Breathing Space functionality\"",
              "fullTitle": "Breathing Space functionality \"before each\" hook: Before in \"Breathing Space functionality\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "launchDarklyBSFlag = await featureToggle.getToggleValue('breathingSpace');",
              "err": {},
              "uuid": "2f8488f4-d161-40bd-88cb-3c9688cc36b0",
              "parentUUID": "521e113a-fd7d-4c22-912d-ed272ce50a2e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite in \"Breathing Space functionality\"",
              "fullTitle": "Breathing Space functionality \"after all\" hook: codeceptjs.afterSuite in \"Breathing Space functionality\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "e3c7421b-85a3-4232-9946-4c4efc0c36f0",
              "parentUUID": "521e113a-fd7d-4c22-912d-ed272ce50a2e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: After in \"Breathing Space functionality\"",
              "fullTitle": "Breathing Space functionality \"after each\" hook: After in \"Breathing Space functionality\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "featureToggle.closeConnection();",
              "err": {},
              "uuid": "bffcd38e-7680-467a-85ab-01ec11c87061",
              "parentUUID": "521e113a-fd7d-4c22-912d-ed272ce50a2e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs in \"Breathing Space functionality\"",
              "fullTitle": "Breathing Space functionality \"after each\" hook: finalize codeceptjs in \"Breathing Space functionality\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "69ad80a5-b488-4221-a64e-1e350c6808a7",
              "parentUUID": "521e113a-fd7d-4c22-912d-ed272ce50a2e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "End to end:claimant Entering Breathing Space via Online and ccd staff Lifting BS via CCD",
              "fullTitle": "Breathing Space functionality: End to end:claimant Entering Breathing Space via Online and ccd staff Lifting BS via CCD",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I}) => {\n    logger.info('The launchDarklyBreathingSpace flag is ', launchDarklyBSFlag);\n    if (launchDarklyBSFlag === true) {\n        //claimant steps\n        await I.amOnCitizenAppPage('');\n        await I.authenticateWithIdam(userType.CITIZEN, true);\n        const claimRef = await I.createClaimDefendantAsOrg();\n        logger.info({message: 'Created a claim in ccd with claim ref: ', claimRef});\n        await I.click('My account');\n        await I.see('Your money claims account');\n        await I.click(claimRef);\n        await I.see('Claim number:');\n        await caseHelper.enterBreathingSpaceOnline(I);\n        await I.click('Sign out');\n        const claim = await apiRequest.retrieveByReferenceNumber(claimRef);\n        const caseId = claim.ccdCaseId;\n        //login as caseworker and verify created event\n        await I.authenticateWithIdam(userType.CASEWORKER);\n        await I.amOnPage(`/case/${testConfig.definition.jurisdiction}/${testConfig.definition.caseType}/` + caseId);\n        await I.see('Claim submitted');\n        await I.see('Enter Breathing Space');\n        await caseHelper.liftBreathingSpace(I);\n        await I.see('Lift Breathing Space');\n    }",
              "err": {},
              "uuid": "1157987a-7f96-4228-aaae-e2d72d0221dc",
              "parentUUID": "521e113a-fd7d-4c22-912d-ed272ce50a2e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enter and Lift Breathing Space Via CCD",
              "fullTitle": "Breathing Space functionality: Enter and Lift Breathing Space Via CCD",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I}) => {\n    logger.info('The launchDarklyBreathingSpace flag is ', launchDarklyBSFlag);\n    if (launchDarklyBSFlag === true) {\n        //claimant steps\n        await I.amOnCitizenAppPage('');\n        await I.authenticateWithIdam(userType.CITIZEN, true);\n        const claimRef = await I.createClaimDefendantAsOrg();\n        await I.click('Sign out');\n        logger.info({message: 'Created a claim in ccd with claim ref: ', claimRef});\n        const claim = await apiRequest.retrieveByReferenceNumber(claimRef);\n        const caseId = claim.ccdCaseId;\n        //login as caseworker and verify created event\n        await I.authenticateWithIdam(userType.CASEWORKER);\n        await I.amOnPage(`/case/${testConfig.definition.jurisdiction}/${testConfig.definition.caseType}/` + caseId);\n        await I.see('Claim created by citizen');\n        //BreathingSpace events\n        await caseHelper.enterBreathingSpace(I);\n        await caseHelper.liftBreathingSpace(I);\n    }",
              "err": {},
              "uuid": "3f1249a6-0250-4c1d-831c-c9643824e2b5",
              "parentUUID": "521e113a-fd7d-4c22-912d-ed272ce50a2e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Negative: Caseworker cannot Enter Breathing Space When Case handed to CCBC",
              "fullTitle": "Breathing Space functionality: Negative: Caseworker cannot Enter Breathing Space When Case handed to CCBC",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I}) => {\n    logger.info('The launchDarklyBreathingSpace flag is ', launchDarklyBSFlag);\n    if (launchDarklyBSFlag === true) {\n        //claimant steps\n        await I.amOnCitizenAppPage('');\n        await I.authenticateWithIdam(userType.CITIZEN, true);\n        const claimRef = await I.createClaimDefendantAsOrg();\n        await I.click('Sign out');\n        logger.info({message: 'Created a claim in ccd with claim ref: ', claimRef});\n        const claim = await apiRequest.retrieveByReferenceNumber(claimRef);\n        const caseId = claim.ccdCaseId;\n        //login as caseworker and verify created event\n        await I.authenticateWithIdam(userType.CASEWORKER);\n        await I.amOnPage(`/case/${testConfig.definition.jurisdiction}/${testConfig.definition.caseType}/` + caseId);\n        await I.see('Claim created by citizen');\n        await I.see('Claim submitted');\n        //Case handed to CCBC\n        await caseHelper.handedToCCBC(I);\n        //BreathingSpace even\n        await caseHelper.enterBreathingSpaceError(I);\n    }",
              "err": {},
              "uuid": "8e579657-19d9-4b56-b1ae-07b57b1997c6",
              "parentUUID": "521e113a-fd7d-4c22-912d-ed272ce50a2e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1157987a-7f96-4228-aaae-e2d72d0221dc",
            "3f1249a6-0250-4c1d-831c-c9643824e2b5",
            "8e579657-19d9-4b56-b1ae-07b57b1997c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "df9d541e-c123-47ab-9c0b-17375901b589",
          "title": "Full reject flow",
          "fullFile": "/Users/kiyreandyer-allen/Desktop/HMCTS/repos/cmc-ccd-e2e-tests/src/test/end-to-end/paths/FullReject.js",
          "file": "/src/test/end-to-end/paths/FullReject.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite in \"Full reject flow\"",
              "fullTitle": "Full reject flow \"before all\" hook: codeceptjs.beforeSuite in \"Full reject flow\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "72415d0a-9308-46af-a5fe-5e9931679bea",
              "parentUUID": "df9d541e-c123-47ab-9c0b-17375901b589",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before in \"Full reject flow\"",
              "fullTitle": "Full reject flow \"before each\" hook: codeceptjs.before in \"Full reject flow\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "28dc0cac-6757-4ab8-ba92-d4ab0931ab15",
              "parentUUID": "df9d541e-c123-47ab-9c0b-17375901b589",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite in \"Full reject flow\"",
              "fullTitle": "Full reject flow \"after all\" hook: codeceptjs.afterSuite in \"Full reject flow\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "103c4930-59ea-4262-a0f2-d8ea787c0254",
              "parentUUID": "df9d541e-c123-47ab-9c0b-17375901b589",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs in \"Full reject flow\"",
              "fullTitle": "Full reject flow \"after each\" hook: finalize codeceptjs in \"Full reject flow\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "57200417-b87a-4bc8-a63f-f7125719c629",
              "parentUUID": "df9d541e-c123-47ab-9c0b-17375901b589",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "full reject flow",
              "fullTitle": "Full reject flow full reject flow",
              "timedOut": false,
              "duration": 1056,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  const catchError = e => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  };\n  let injectedArguments;\n  try {\n    injectedArguments = getInjectedArguments(testFn, test);\n  } catch (e) {\n    catchError(e);\n    return;\n  }\n  testFn.call(test, injectedArguments).then(() => {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch(catchError);\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  testFn.call(test, getInjectedArguments(testFn, test));\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  recorder.add('fire test.passed', () => {\n    event.emit(event.test.passed, test);\n    event.emit(event.test.finished, test);\n  });\n  recorder.add('finish test', () => done());\n  recorder.catch();\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'goto')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'goto')\n    at Puppeteer.amOnPage (node_modules/codeceptjs/lib/helper/Puppeteer.js:644:21)\n    at PuppeteerHelper.amOnCitizenAppPage (src/test/end-to-end/helpers/PuppeteerHelper.js:58:40)\n    at Step.run (node_modules/codeceptjs/lib/step.js:122:47)\n    at /Users/kiyreandyer-allen/Desktop/HMCTS/repos/cmc-ccd-e2e-tests/node_modules/codeceptjs/lib/actor.js:135:23",
                "diff": null
              },
              "uuid": "6995628a-c605-42dd-803b-66c8c44c5c61",
              "parentUUID": "df9d541e-c123-47ab-9c0b-17375901b589",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6995628a-c605-42dd-803b-66c8c44c5c61"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1056,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "fee5c1b9-70d1-4b5f-b936-9c9554222e25",
          "title": "Draw Direction Order by LA (Generate Order flow - claim amount < 500)",
          "fullFile": "/Users/kiyreandyer-allen/Desktop/HMCTS/repos/cmc-ccd-e2e-tests/src/test/end-to-end/paths/GenerateOrder.js",
          "file": "/src/test/end-to-end/paths/GenerateOrder.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite in \"Draw Direction Order by LA (Generate Order flow - claim amount < 500)\"",
              "fullTitle": "Draw Direction Order by LA (Generate Order flow - claim amount < 500) \"before all\" hook: codeceptjs.beforeSuite in \"Draw Direction Order by LA (Generate Order flow - claim amount < 500)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "dd1d64a4-a06c-4b2d-b439-f2895d0f474c",
              "parentUUID": "fee5c1b9-70d1-4b5f-b936-9c9554222e25",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before in \"Draw Direction Order by LA (Generate Order flow - claim amount < 500)\"",
              "fullTitle": "Draw Direction Order by LA (Generate Order flow - claim amount < 500) \"before each\" hook: codeceptjs.before in \"Draw Direction Order by LA (Generate Order flow - claim amount < 500)\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "c34215d1-ef8f-4ef5-89ae-5bab4f505f90",
              "parentUUID": "fee5c1b9-70d1-4b5f-b936-9c9554222e25",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite in \"Draw Direction Order by LA (Generate Order flow - claim amount < 500)\"",
              "fullTitle": "Draw Direction Order by LA (Generate Order flow - claim amount < 500) \"after all\" hook: codeceptjs.afterSuite in \"Draw Direction Order by LA (Generate Order flow - claim amount < 500)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "b5b70165-85ba-4ca5-9500-9a0a4be16209",
              "parentUUID": "fee5c1b9-70d1-4b5f-b936-9c9554222e25",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs in \"Draw Direction Order by LA (Generate Order flow - claim amount < 500)\"",
              "fullTitle": "Draw Direction Order by LA (Generate Order flow - claim amount < 500) \"after each\" hook: finalize codeceptjs in \"Draw Direction Order by LA (Generate Order flow - claim amount < 500)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "392d99a4-8a5b-47f5-8db8-2e3a559fbf90",
              "parentUUID": "fee5c1b9-70d1-4b5f-b936-9c9554222e25",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Full Defence → Dispute All → Reject mediation by Defendant → Decide to proceed is Yes (claimant)",
              "fullTitle": "Draw Direction Order by LA (Generate Order flow - claim amount < 500) Full Defence → Dispute All → Reject mediation by Defendant → Decide to proceed is Yes (claimant)",
              "timedOut": false,
              "duration": 318,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  const catchError = e => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  };\n  let injectedArguments;\n  try {\n    injectedArguments = getInjectedArguments(testFn, test);\n  } catch (e) {\n    catchError(e);\n    return;\n  }\n  testFn.call(test, injectedArguments).then(() => {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch(catchError);\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  testFn.call(test, getInjectedArguments(testFn, test));\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  recorder.add('fire test.passed', () => {\n    event.emit(event.test.passed, test);\n    event.emit(event.test.finished, test);\n  });\n  recorder.add('finish test', () => done());\n  recorder.catch();\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at base32tohex (node_modules/totp-generator/index.js:33:28)\n    at getToken (node_modules/totp-generator/index.js:7:8)\n    at Object.setupTokens (src/test/end-to-end/ccdApi/apiRequest.js:27:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Object.setUpApiAuthToken (src/test/end-to-end/ccdApi/caseHelper.js:143:5)\n    at async runFeatureTestSteps (src/test/end-to-end/paths/GenerateOrder.js:17:5)\n    at async Test.<anonymous> (src/test/end-to-end/paths/GenerateOrder.js:13:5)",
                "diff": null
              },
              "uuid": "c683d211-c390-47ac-acfe-764281e04af2",
              "parentUUID": "fee5c1b9-70d1-4b5f-b936-9c9554222e25",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c683d211-c390-47ac-acfe-764281e04af2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 318,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "c7ed87a5-8a0a-411a-8515-b25626983b13",
          "title": "HWF functionality",
          "fullFile": "/Users/kiyreandyer-allen/Desktop/HMCTS/repos/cmc-ccd-e2e-tests/src/test/end-to-end/paths/hwf.js",
          "file": "/src/test/end-to-end/paths/hwf.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite in \"HWF functionality\"",
              "fullTitle": "HWF functionality \"before all\" hook: codeceptjs.beforeSuite in \"HWF functionality\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "10e173ed-7394-46d6-9263-7c1a3b878319",
              "parentUUID": "c7ed87a5-8a0a-411a-8515-b25626983b13",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before in \"HWF functionality\"",
              "fullTitle": "HWF functionality \"before each\" hook: codeceptjs.before in \"HWF functionality\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "a721147c-a6b2-4772-be48-af4b9bf73320",
              "parentUUID": "c7ed87a5-8a0a-411a-8515-b25626983b13",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite in \"HWF functionality\"",
              "fullTitle": "HWF functionality \"after all\" hook: codeceptjs.afterSuite in \"HWF functionality\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "ec9023d8-5bd0-42ab-b65c-94dc7d9bdd26",
              "parentUUID": "c7ed87a5-8a0a-411a-8515-b25626983b13",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs in \"HWF functionality\"",
              "fullTitle": "HWF functionality \"after each\" hook: finalize codeceptjs in \"HWF functionality\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "8828d693-2e36-40b2-98d1-a9f98c5776a8",
              "parentUUID": "c7ed87a5-8a0a-411a-8515-b25626983b13",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Claimant create a hwf case --> Caseworker submit updated",
              "fullTitle": "HWF functionality Claimant create a hwf case --> Caseworker submit updated",
              "timedOut": false,
              "duration": 1059,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  const catchError = e => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  };\n  let injectedArguments;\n  try {\n    injectedArguments = getInjectedArguments(testFn, test);\n  } catch (e) {\n    catchError(e);\n    return;\n  }\n  testFn.call(test, injectedArguments).then(() => {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch(catchError);\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  testFn.call(test, getInjectedArguments(testFn, test));\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  recorder.add('fire test.passed', () => {\n    event.emit(event.test.passed, test);\n    event.emit(event.test.finished, test);\n  });\n  recorder.add('finish test', () => done());\n  recorder.catch();\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'goto')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'goto')\n    at Puppeteer.amOnPage (node_modules/codeceptjs/lib/helper/Puppeteer.js:644:21)\n    at PuppeteerHelper.amOnCitizenAppPage (src/test/end-to-end/helpers/PuppeteerHelper.js:58:40)\n    at Step.run (node_modules/codeceptjs/lib/step.js:122:47)\n    at /Users/kiyreandyer-allen/Desktop/HMCTS/repos/cmc-ccd-e2e-tests/node_modules/codeceptjs/lib/actor.js:135:23",
                "diff": null
              },
              "uuid": "cae4fbe7-1b0a-4195-9e74-c2bf36997eb5",
              "parentUUID": "c7ed87a5-8a0a-411a-8515-b25626983b13",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cae4fbe7-1b0a-4195-9e74-c2bf36997eb5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1059,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "7561db08-67ff-4f4d-a58b-f540d4f56ead",
          "title": "Judge Draw Direction Order (JDDO - claim amount > 500)",
          "fullFile": "/Users/kiyreandyer-allen/Desktop/HMCTS/repos/cmc-ccd-e2e-tests/src/test/end-to-end/paths/JDDO.js",
          "file": "/src/test/end-to-end/paths/JDDO.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite in \"Judge Draw Direction Order (JDDO - claim amount > 500)\"",
              "fullTitle": "Judge Draw Direction Order (JDDO - claim amount > 500) \"before all\" hook: codeceptjs.beforeSuite in \"Judge Draw Direction Order (JDDO - claim amount > 500)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "4a20490d-9053-453b-a41b-4a0fef79e317",
              "parentUUID": "7561db08-67ff-4f4d-a58b-f540d4f56ead",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before in \"Judge Draw Direction Order (JDDO - claim amount > 500)\"",
              "fullTitle": "Judge Draw Direction Order (JDDO - claim amount > 500) \"before each\" hook: codeceptjs.before in \"Judge Draw Direction Order (JDDO - claim amount > 500)\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "99ea3756-01f8-4aca-ae0f-ba38b59b9f91",
              "parentUUID": "7561db08-67ff-4f4d-a58b-f540d4f56ead",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite in \"Judge Draw Direction Order (JDDO - claim amount > 500)\"",
              "fullTitle": "Judge Draw Direction Order (JDDO - claim amount > 500) \"after all\" hook: codeceptjs.afterSuite in \"Judge Draw Direction Order (JDDO - claim amount > 500)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "e5ce5ed9-1c05-4317-8bad-38b51a2ce233",
              "parentUUID": "7561db08-67ff-4f4d-a58b-f540d4f56ead",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs in \"Judge Draw Direction Order (JDDO - claim amount > 500)\"",
              "fullTitle": "Judge Draw Direction Order (JDDO - claim amount > 500) \"after each\" hook: finalize codeceptjs in \"Judge Draw Direction Order (JDDO - claim amount > 500)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "8a60ffcc-2741-40a9-8df7-acc35d73c2b5",
              "parentUUID": "7561db08-67ff-4f4d-a58b-f540d4f56ead",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Full Defence → Dispute All → Reject mediation by Defendant → Decide to proceed is Yes (claimant) @crossbrowser",
              "fullTitle": "Judge Draw Direction Order (JDDO - claim amount > 500) Full Defence → Dispute All → Reject mediation by Defendant → Decide to proceed is Yes (claimant) @crossbrowser",
              "timedOut": false,
              "duration": 330,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  const catchError = e => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  };\n  let injectedArguments;\n  try {\n    injectedArguments = getInjectedArguments(testFn, test);\n  } catch (e) {\n    catchError(e);\n    return;\n  }\n  testFn.call(test, injectedArguments).then(() => {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch(catchError);\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  testFn.call(test, getInjectedArguments(testFn, test));\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  recorder.add('fire test.passed', () => {\n    event.emit(event.test.passed, test);\n    event.emit(event.test.finished, test);\n  });\n  recorder.add('finish test', () => done());\n  recorder.catch();\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at base32tohex (node_modules/totp-generator/index.js:33:28)\n    at getToken (node_modules/totp-generator/index.js:7:8)\n    at Object.setupTokens (src/test/end-to-end/ccdApi/apiRequest.js:27:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Object.setUpApiAuthToken (src/test/end-to-end/ccdApi/caseHelper.js:143:5)\n    at async runFeatureTestSteps (src/test/end-to-end/paths/JDDO.js:18:5)\n    at async Test.<anonymous> (src/test/end-to-end/paths/JDDO.js:13:5)",
                "diff": null
              },
              "uuid": "2198212c-0d46-4b92-8c12-fa7c9dd36e86",
              "parentUUID": "7561db08-67ff-4f4d-a58b-f540d4f56ead",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2198212c-0d46-4b92-8c12-fa7c9dd36e86"
          ],
          "pending": [],
          "skipped": [],
          "duration": 330,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "5.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "functional-output/parallel_chunk1_4697d80bdefdef94aaba8756c0032a6f_1",
        "reportName": "index",
        "reportTitle": "Functional Test results",
        "inlineAssets": true
      },
      "version": "4.1.0"
    }
  }
}