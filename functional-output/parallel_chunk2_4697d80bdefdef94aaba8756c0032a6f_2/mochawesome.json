{
  "stats": {
    "suites": 4,
    "tests": 6,
    "passes": 0,
    "pending": 1,
    "failures": 5,
    "start": "2024-03-22T09:17:59.805Z",
    "end": "2024-03-22T09:18:13.447Z",
    "duration": 13642,
    "testsRegistered": 6,
    "passPercent": 0,
    "pendingPercent": 16.666666666666664,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "90e3b554-6dcc-4cde-b82d-b96f4a365ab6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e016b02b-c2bf-496b-8b7c-490d8ef519e2",
          "title": "ManageDocuments functionality",
          "fullFile": "/Users/kiyreandyer-allen/Desktop/HMCTS/repos/cmc-ccd-e2e-tests/src/test/end-to-end/paths/ManageDocuments.js",
          "file": "/src/test/end-to-end/paths/ManageDocuments.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite in \"ManageDocuments functionality\"",
              "fullTitle": "ManageDocuments functionality \"before all\" hook: codeceptjs.beforeSuite in \"ManageDocuments functionality\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "c637e0be-554e-407c-9783-9ea6b4b75541",
              "parentUUID": "e016b02b-c2bf-496b-8b7c-490d8ef519e2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before in \"ManageDocuments functionality\"",
              "fullTitle": "ManageDocuments functionality \"before each\" hook: codeceptjs.before in \"ManageDocuments functionality\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "5b79d2d6-6490-48de-a1eb-b6e219a89e4f",
              "parentUUID": "e016b02b-c2bf-496b-8b7c-490d8ef519e2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite in \"ManageDocuments functionality\"",
              "fullTitle": "ManageDocuments functionality \"after all\" hook: codeceptjs.afterSuite in \"ManageDocuments functionality\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "1adf0aed-efa8-4fc5-8816-5290ca3d96f4",
              "parentUUID": "e016b02b-c2bf-496b-8b7c-490d8ef519e2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs in \"ManageDocuments functionality\"",
              "fullTitle": "ManageDocuments functionality \"after each\" hook: finalize codeceptjs in \"ManageDocuments functionality\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "beb362e0-1ce1-4ef8-8987-9aafd2c19553",
              "parentUUID": "e016b02b-c2bf-496b-8b7c-490d8ef519e2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Claimant create a case --> Caseworker submit Manage Document Other",
              "fullTitle": "ManageDocuments functionality Claimant create a case --> Caseworker submit Manage Document Other",
              "timedOut": false,
              "duration": 1056,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  const catchError = e => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  };\n  let injectedArguments;\n  try {\n    injectedArguments = getInjectedArguments(testFn, test);\n  } catch (e) {\n    catchError(e);\n    return;\n  }\n  testFn.call(test, injectedArguments).then(() => {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch(catchError);\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  testFn.call(test, getInjectedArguments(testFn, test));\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  recorder.add('fire test.passed', () => {\n    event.emit(event.test.passed, test);\n    event.emit(event.test.finished, test);\n  });\n  recorder.add('finish test', () => done());\n  recorder.catch();\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'goto')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'goto')\n    at Puppeteer.amOnPage (node_modules/codeceptjs/lib/helper/Puppeteer.js:644:21)\n    at PuppeteerHelper.amOnCitizenAppPage (src/test/end-to-end/helpers/PuppeteerHelper.js:58:40)\n    at Step.run (node_modules/codeceptjs/lib/step.js:122:47)\n    at /Users/kiyreandyer-allen/Desktop/HMCTS/repos/cmc-ccd-e2e-tests/node_modules/codeceptjs/lib/actor.js:135:23",
                "diff": null
              },
              "uuid": "533253b7-6fea-4f07-b828-53546624e6da",
              "parentUUID": "e016b02b-c2bf-496b-8b7c-490d8ef519e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Claimant create a case --> Caseworker submit manage Document Correspondance",
              "fullTitle": "ManageDocuments functionality: Claimant create a case --> Caseworker submit manage Document Correspondance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "a8ab6f01-21da-4bbe-976c-033c20b9e44c",
              "parentUUID": "e016b02b-c2bf-496b-8b7c-490d8ef519e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "533253b7-6fea-4f07-b828-53546624e6da"
          ],
          "pending": [
            "a8ab6f01-21da-4bbe-976c-033c20b9e44c"
          ],
          "skipped": [],
          "duration": 1056,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "884816c4-daf0-4729-89b1-3ff3d05b4e60",
          "title": "Mediation Unsuccessful)",
          "fullFile": "/Users/kiyreandyer-allen/Desktop/HMCTS/repos/cmc-ccd-e2e-tests/src/test/end-to-end/paths/MediationFailure.js",
          "file": "/src/test/end-to-end/paths/MediationFailure.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite in \"Mediation Unsuccessful)\"",
              "fullTitle": "Mediation Unsuccessful) \"before all\" hook: codeceptjs.beforeSuite in \"Mediation Unsuccessful)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "60c827b9-b0bc-4cdb-98ab-7bb184dedd11",
              "parentUUID": "884816c4-daf0-4729-89b1-3ff3d05b4e60",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before in \"Mediation Unsuccessful)\"",
              "fullTitle": "Mediation Unsuccessful) \"before each\" hook: codeceptjs.before in \"Mediation Unsuccessful)\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "b1c7d123-edd6-48f0-a37a-1d17073b5f4e",
              "parentUUID": "884816c4-daf0-4729-89b1-3ff3d05b4e60",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite in \"Mediation Unsuccessful)\"",
              "fullTitle": "Mediation Unsuccessful) \"after all\" hook: codeceptjs.afterSuite in \"Mediation Unsuccessful)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "f84d1ad4-21f6-42b5-b07b-6562d1b6a7f1",
              "parentUUID": "884816c4-daf0-4729-89b1-3ff3d05b4e60",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs in \"Mediation Unsuccessful)\"",
              "fullTitle": "Mediation Unsuccessful) \"after each\" hook: finalize codeceptjs in \"Mediation Unsuccessful)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "1f91c7c6-753d-4a02-9b90-3bc463ca5f82",
              "parentUUID": "884816c4-daf0-4729-89b1-3ff3d05b4e60",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Full Defence → Dispute All → Accept mediation by Defendant → Decide to proceed is Yes (claimant)→ Accept mediation by claimant",
              "fullTitle": "Mediation Unsuccessful) Full Defence → Dispute All → Accept mediation by Defendant → Decide to proceed is Yes (claimant)→ Accept mediation by claimant",
              "timedOut": false,
              "duration": 879,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  const catchError = e => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  };\n  let injectedArguments;\n  try {\n    injectedArguments = getInjectedArguments(testFn, test);\n  } catch (e) {\n    catchError(e);\n    return;\n  }\n  testFn.call(test, injectedArguments).then(() => {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch(catchError);\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  testFn.call(test, getInjectedArguments(testFn, test));\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  recorder.add('fire test.passed', () => {\n    event.emit(event.test.passed, test);\n    event.emit(event.test.finished, test);\n  });\n  recorder.add('finish test', () => done());\n  recorder.catch();\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at base32tohex (node_modules/totp-generator/index.js:33:28)\n    at getToken (node_modules/totp-generator/index.js:7:8)\n    at Object.setupTokens (src/test/end-to-end/ccdApi/apiRequest.js:27:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Object.setUpApiAuthToken (src/test/end-to-end/ccdApi/caseHelper.js:143:5)\n    at async runFeatureTestSteps (src/test/end-to-end/paths/MediationFailure.js:17:5)\n    at async Test.<anonymous> (src/test/end-to-end/paths/MediationFailure.js:13:5)",
                "diff": null
              },
              "uuid": "eb0f065a-7dec-4cc3-87aa-08d577134062",
              "parentUUID": "884816c4-daf0-4729-89b1-3ff3d05b4e60",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "eb0f065a-7dec-4cc3-87aa-08d577134062"
          ],
          "pending": [],
          "skipped": [],
          "duration": 879,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "50432843-2c49-4815-967a-ec23e1711a34",
          "title": "Mediation Successful",
          "fullFile": "/Users/kiyreandyer-allen/Desktop/HMCTS/repos/cmc-ccd-e2e-tests/src/test/end-to-end/paths/MediationSuccessul.js",
          "file": "/src/test/end-to-end/paths/MediationSuccessul.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite in \"Mediation Successful\"",
              "fullTitle": "Mediation Successful \"before all\" hook: codeceptjs.beforeSuite in \"Mediation Successful\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "0b0969b5-987a-481c-893c-1c9348a11d26",
              "parentUUID": "50432843-2c49-4815-967a-ec23e1711a34",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before in \"Mediation Successful\"",
              "fullTitle": "Mediation Successful \"before each\" hook: codeceptjs.before in \"Mediation Successful\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "4348596f-7c91-4b5d-a556-79c29279b21c",
              "parentUUID": "50432843-2c49-4815-967a-ec23e1711a34",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite in \"Mediation Successful\"",
              "fullTitle": "Mediation Successful \"after all\" hook: codeceptjs.afterSuite in \"Mediation Successful\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "c37ab991-6912-4cc0-9f31-b5b63df5ed6e",
              "parentUUID": "50432843-2c49-4815-967a-ec23e1711a34",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs in \"Mediation Successful\"",
              "fullTitle": "Mediation Successful \"after each\" hook: finalize codeceptjs in \"Mediation Successful\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "b2a383d9-2d43-4d5c-b766-262e7ab31918",
              "parentUUID": "50432843-2c49-4815-967a-ec23e1711a34",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Full Defence → Dispute All → Accept mediation by Defendant → Decide to proceed is Yes (claimant)→ Accept mediation by claimant",
              "fullTitle": "Mediation Successful Full Defence → Dispute All → Accept mediation by Defendant → Decide to proceed is Yes (claimant)→ Accept mediation by claimant",
              "timedOut": false,
              "duration": 825,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  const catchError = e => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  };\n  let injectedArguments;\n  try {\n    injectedArguments = getInjectedArguments(testFn, test);\n  } catch (e) {\n    catchError(e);\n    return;\n  }\n  testFn.call(test, injectedArguments).then(() => {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch(catchError);\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  testFn.call(test, getInjectedArguments(testFn, test));\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  recorder.add('fire test.passed', () => {\n    event.emit(event.test.passed, test);\n    event.emit(event.test.finished, test);\n  });\n  recorder.add('finish test', () => done());\n  recorder.catch();\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'length')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'length')\n    at base32tohex (node_modules/totp-generator/index.js:33:28)\n    at getToken (node_modules/totp-generator/index.js:7:8)\n    at Object.setupTokens (src/test/end-to-end/ccdApi/apiRequest.js:27:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Object.setUpApiAuthToken (src/test/end-to-end/ccdApi/caseHelper.js:143:5)\n    at async runFeatureTestSteps (src/test/end-to-end/paths/MediationSuccessul.js:17:5)\n    at async Test.<anonymous> (src/test/end-to-end/paths/MediationSuccessul.js:13:5)",
                "diff": null
              },
              "uuid": "94351be8-eab2-4c9e-b736-86dceae138c1",
              "parentUUID": "50432843-2c49-4815-967a-ec23e1711a34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "94351be8-eab2-4c9e-b736-86dceae138c1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 825,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "f7a6b8b9-2f46-4744-9403-d8e0134462ba",
          "title": "OCON9x functionality",
          "fullFile": "/Users/kiyreandyer-allen/Desktop/HMCTS/repos/cmc-ccd-e2e-tests/src/test/end-to-end/paths/ocon9x.js",
          "file": "/src/test/end-to-end/paths/ocon9x.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite in \"OCON9x functionality\"",
              "fullTitle": "OCON9x functionality \"before all\" hook: codeceptjs.beforeSuite in \"OCON9x functionality\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "c571fa0c-612a-4eec-be72-1eb498d8a9a3",
              "parentUUID": "f7a6b8b9-2f46-4744-9403-d8e0134462ba",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before in \"OCON9x functionality\"",
              "fullTitle": "OCON9x functionality \"before each\" hook: codeceptjs.before in \"OCON9x functionality\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "ffa2bb51-33bb-4666-a95c-1762fe4c21f7",
              "parentUUID": "f7a6b8b9-2f46-4744-9403-d8e0134462ba",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: Before in \"OCON9x functionality\"",
              "fullTitle": "OCON9x functionality \"before each\" hook: Before in \"OCON9x functionality\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "launchDarklyOCONFlag = await featureToggle.getToggleValue('oconenhancements');",
              "err": {},
              "uuid": "ca3fff24-bdf7-4dfc-802f-3a42b9ba822e",
              "parentUUID": "f7a6b8b9-2f46-4744-9403-d8e0134462ba",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite in \"OCON9x functionality\"",
              "fullTitle": "OCON9x functionality \"after all\" hook: codeceptjs.afterSuite in \"OCON9x functionality\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "9b3ddb18-0433-4177-ac13-3cdd1d093831",
              "parentUUID": "f7a6b8b9-2f46-4744-9403-d8e0134462ba",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: After in \"OCON9x functionality\"",
              "fullTitle": "OCON9x functionality \"after each\" hook: After in \"OCON9x functionality\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "featureToggle.closeConnection();",
              "err": {},
              "uuid": "55defd8d-a645-41c1-9598-11579c283e45",
              "parentUUID": "f7a6b8b9-2f46-4744-9403-d8e0134462ba",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs in \"OCON9x functionality\"",
              "fullTitle": "OCON9x functionality \"after each\" hook: finalize codeceptjs in \"OCON9x functionality\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "be14571a-f7f5-46ab-86e3-2684f398d3dc",
              "parentUUID": "f7a6b8b9-2f46-4744-9403-d8e0134462ba",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Claimant create a case --> Caseworker submit ocon9x event and paper resp admission",
              "fullTitle": "OCON9x functionality Claimant create a case --> Caseworker submit ocon9x event and paper resp admission",
              "timedOut": false,
              "duration": 1058,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  const catchError = e => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  };\n  let injectedArguments;\n  try {\n    injectedArguments = getInjectedArguments(testFn, test);\n  } catch (e) {\n    catchError(e);\n    return;\n  }\n  testFn.call(test, injectedArguments).then(() => {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch(catchError);\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  testFn.call(test, getInjectedArguments(testFn, test));\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  recorder.add('fire test.passed', () => {\n    event.emit(event.test.passed, test);\n    event.emit(event.test.finished, test);\n  });\n  recorder.add('finish test', () => done());\n  recorder.catch();\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'goto')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'goto')\n    at Puppeteer.amOnPage (node_modules/codeceptjs/lib/helper/Puppeteer.js:644:21)\n    at PuppeteerHelper.amOnCitizenAppPage (src/test/end-to-end/helpers/PuppeteerHelper.js:58:40)\n    at Step.run (node_modules/codeceptjs/lib/step.js:122:47)\n    at /Users/kiyreandyer-allen/Desktop/HMCTS/repos/cmc-ccd-e2e-tests/node_modules/codeceptjs/lib/actor.js:135:23",
                "diff": null
              },
              "uuid": "1706b073-e294-4451-89b0-d21ee448e8dc",
              "parentUUID": "f7a6b8b9-2f46-4744-9403-d8e0134462ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Claimant create a case --> Caseworker submit ocon9x event and paper resp defence",
              "fullTitle": "OCON9x functionality Claimant create a case --> Caseworker submit ocon9x event and paper resp defence",
              "timedOut": false,
              "duration": 1060,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  const catchError = e => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  };\n  let injectedArguments;\n  try {\n    injectedArguments = getInjectedArguments(testFn, test);\n  } catch (e) {\n    catchError(e);\n    return;\n  }\n  testFn.call(test, injectedArguments).then(() => {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch(catchError);\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  testFn.call(test, getInjectedArguments(testFn, test));\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  recorder.add('fire test.passed', () => {\n    event.emit(event.test.passed, test);\n    event.emit(event.test.finished, test);\n  });\n  recorder.add('finish test', () => done());\n  recorder.catch();\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'goto')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'goto')\n    at Puppeteer.amOnPage (node_modules/codeceptjs/lib/helper/Puppeteer.js:644:21)\n    at PuppeteerHelper.amOnCitizenAppPage (src/test/end-to-end/helpers/PuppeteerHelper.js:58:40)\n    at Step.run (node_modules/codeceptjs/lib/step.js:122:47)\n    at /Users/kiyreandyer-allen/Desktop/HMCTS/repos/cmc-ccd-e2e-tests/node_modules/codeceptjs/lib/actor.js:135:23",
                "diff": null
              },
              "uuid": "e99ffe4f-0dcc-4830-b39a-4f23b2885487",
              "parentUUID": "f7a6b8b9-2f46-4744-9403-d8e0134462ba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1706b073-e294-4451-89b0-d21ee448e8dc",
            "e99ffe4f-0dcc-4830-b39a-4f23b2885487"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2118,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "5.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "functional-output/parallel_chunk2_4697d80bdefdef94aaba8756c0032a6f_2",
        "reportName": "index",
        "reportTitle": "Functional Test results",
        "inlineAssets": true
      },
      "version": "4.1.0"
    }
  }
}