#!groovy

properties([
        pipelineTriggers([cron('8 08 * * 1-5')]),
        parameters([
                choice(name: 'ENVIRONMENT', choices: ['aat', 'demo', 'preview'], description: 'Environment to test'),
                string(name: 'WORKERS', defaultValue: '5', description: 'Number of workers'),
                choice(name: 'RUN_ACCESSIBILITY_TESTS', choice: ['false', 'true'], description: 'Runs accessibility tests during test execution'),
                choice(name: 'SKIP_AUTH_SETUP', choice: ['false', 'true'], description: 'Skip users authentication setup'),
                string(name: 'ExUI_URL_TO_TEST', defaultValue: 'https://manage-case.aat.platform.hmcts.net', description: 'The exui URL you want to run cmc end to end tests against'),
                choice(name: 'CMC_URL_TO_TEST', choices: ['https://moneyclaims.aat.platform.hmcts.net', 'https://moneyclaims1.demo.platform.hmcts.net'], description: 'The cmc citizen frontend URL you want to run cmc end to end tests against'),
                choice(name: 'CUI_URL_TO_TEST', choices: ['https://civil-citizen-ui.aat.platform.hmcts.net', 'https://moneyclaims.demo.platform.hmcts.net'], description: 'The cui citizen frontend URL you want to run cmc end to end tests against'),
                choice(name: 'IDAM_WEB_URL', choices: ['https://idam-web.aat.platform.hmcts.net', 'https://idam-web.demo.platform.hmcts.net'], description: 'The URL of idam web'),
                choice(name: 'IDAM_API_URL', choices: ['https://idam-api.aat.platform.hmcts.net', 'https://idam-api.demo.platform.hmcts.net'], description: 'The URL of idam api'),
                choice(name: 'DM_STORE_URL', choices: ['http://dm-store-aat.service.core-compute-aat.internal', 'http://dm-store-demo.service.core-compute-demo.internal'], description: 'The URL of dm store'),
                choice(name: 'SERVICE_AUTH_PROVIDER_API_BASE_URL', choices: ['http://rpe-service-auth-provider-aat.service.core-compute-aat.internal', 'http://rpe-service-auth-provider-demo.service.core-compute-demo.internal'], description: 'The URL of service auth provider'),
                choice(name: 'CCD_DATA_STORE_URL', defaultValue: ['http://ccd-data-store-api-aat.service.core-compute-aat.internal', 'http://ccd-data-store-api-demo.service.core-compute-demo.internal'], description: 'The URL of ccd data store'),
                choice(name: 'CLAIM_STORE_URL', defaultValue: ['http://cmc-claim-store-aat.service.core-compute-aat.internal', 'http://cmc-claim-store-demo.service.core-compute-demo.internal'], description: 'Claim store url'),
        ])
])

@Library("Infrastructure") _

String product = "cmc"
String component = "ccd-e2e-tests"
def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
  'cmc-aat': [
    secret('cmc-caseworker-test-username', 'CW_USER_EMAIL'),
    secret('cmc-caseworker-password', 'CW_USER_PASSWORD'),
    secret('cmc-la-username', 'LA_USER_EMAIL'),
    secret('cmc-la-password', 'LA_USER_PASSWORD'),
    secret('cmc-judge-username', 'JUDGE_USER_EMAIL'),
    secret('cmc-judge-password', 'JUDGE_USER_PASSWORD'),
    secret('smoke-test-user-password', 'SMOKE_TEST_USER_PASSWORD'),
    secret('s2s-microservicekey-cmc', 'S2S_MICROSERVICE_KEY_CMC'),
    secret('cmc-s2s-secret', 'S2S_MICROSERVICE_KEY_PWD'),
    secret('launchDarkly-sdk-key', 'LAUNCHDARKLY_KEY')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

void publishBootstrapReport() {
    publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: 'allure-bootstrap-report',
            reportFiles: 'index.html',
            reportName: 'Allure Bootstrap Report'
        ])
  }

  void publishFunctionalReport() {
    publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: 'allure-functional-report',
            reportFiles: 'index.html',
            reportName: 'Allure Functional Report'
        ])
  }

withNightlyPipeline("nodejs", product, component) {
  env.EXUI_URL = params.ExUI_URL_TO_TEST
  env.CITIZEN_APP_URL = params.CMC_URL_TO_TEST
  env.CUI_APP_URL = params.CUI_URL_TO_TEST
  env.DM_STORE_URL=params.DM_STORE_URL
  env.IDAM_API_URL=params.IDAM_API_URL
  env.IDAM_WEB_URL=params.IDAM_WEB_URL
  env.SERVICE_AUTH_PROVIDER_API_BASE_URL = params.SERVICE_AUTH_PROVIDER_API_BASE_URL
  env.CCD_DATA_STORE_URL = params.CCD_DATA_STORE_URL
  env.CLAIM_STORE_URL = params.CLAIM_STORE_URL
  env.ENVIRONMENT = params.ENVIRONMENT
  env.WORKERS = params.WORKERS
  env.SKIP_AUTH_SETUP = params.SKIP_AUTH_SETUP
  loadVaultSecrets(secrets)

  boolean setupPassed=true
  boolean flowInterrupted = false

  afterAlways('DependencyCheckNightly') {
    stage('Test setup') {
      try {
        yarnBuilder.yarn('test:setup:playwright-install')
        yarnBuilder.yarn('test:setup:ci')
      } catch (Exception error) {
        if(error instanceof org.jenkinsci.plugins.workflow.steps.FlowInterruptedException) {
          flowInterrupted = true
        }
        setupPassed=false
        unstable(message: "${STAGE_NAME} is unstable: " + error.toString())
      } finally {
        yarnBuilder.yarn('test:bootstrap:generate-report')
      }
    }

    if(setupPassed) {
      stage('Chrome full functional test') {
        try {
          if(flowInterrupted) {
            throw new org.jenkinsci.plugins.workflow.steps.FlowInterruptedException()
          }
          yarnBuilder.yarn('test:functional:chrome:ci')
        } catch (Exception error) {
          if(error instanceof org.jenkinsci.plugins.workflow.steps.FlowInterruptedException) {
            flowInterrupted = true
          }
          unstable(message: "${STAGE_NAME} is unstable: " + error.toString())
        } finally {
          yarnBuilder.yarn('test:functional:generate-report')
        }
      }

      stage('Firefox full functional test') {
        try {
          if(flowInterrupted) {
            throw new org.jenkinsci.plugins.workflow.steps.FlowInterruptedException()
          }
          yarnBuilder.yarn('test:functional:firefox:ci')
        } catch (Exception error) {
          if(error instanceof org.jenkinsci.plugins.workflow.steps.FlowInterruptedException) {
            flowInterrupted = true
          }
          unstable(message: "${STAGE_NAME} is unstable: " + error.toString())
        } finally {
          yarnBuilder.yarn('test:functional:generate-report')
        }
      }

      stage('Edge full functional test') {
        try {
          if(flowInterrupted) {
            throw new org.jenkinsci.plugins.workflow.steps.FlowInterruptedException()
          }
          yarnBuilder.yarn('test:functional:edge:ci')
        } catch (Exception error) {
          if(error instanceof org.jenkinsci.plugins.workflow.steps.FlowInterruptedException) {
            flowInterrupted = true
          }
          unstable(message: "${STAGE_NAME} is unstable: " + error.toString())
        } finally {
          yarnBuilder.yarn('test:functional:generate-report')
        }
      }

      stage('Safari full functional test') {
        try {
          if(flowInterrupted) {
            throw new org.jenkinsci.plugins.workflow.steps.FlowInterruptedException()
          }
          yarnBuilder.yarn('test:functional:safari:ci')
        } catch (Exception error) {
          if(error instanceof org.jenkinsci.plugins.workflow.steps.FlowInterruptedException) {
            flowInterrupted = true
          }
          unstable(message: "${STAGE_NAME} is unstable: " + error.toString())
        } finally {
          yarnBuilder.yarn('test:functional:generate-report')
          publishFunctionalReport()
        }
      }
    }

      stage('Test teardown') {
        try {
          yarnBuilder.yarn('test:teardown:ci')
        } catch (Exception error) {
          unstable(message: "${STAGE_NAME} is unstable: " + error.toString())
        } finally {
          yarnBuilder.yarn('test:bootstrap:generate-report')
          publishBootstrapReport()
        }
      }
    }
  }