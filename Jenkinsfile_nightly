#!groovy

properties([
        pipelineTriggers([cron('00 21 * * *')]),
        parameters([
                string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
                string(name: 'ExUI_URL_TO_TEST', defaultValue: 'https://manage-case.aat.platform.hmcts.net/', description: 'The exui URL you want to run cmc end to end tests against'),
                string(name: 'CMC_URL_TO_TEST', defaultValue: 'https://moneyclaims.aat.platform.hmcts.net/', description: 'The cmc citizen frontend URL you want to run cmc end to end tests against'),
                string(name: 'IDAM_API_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net', description: 'The URL of idam api'),
                string(name: 'DM_STORE_URL', defaultValue: 'http://dm-store-aat.service.core-compute-aat.internal', description: 'The URL of dm store'),
                string(name: 'SERVICE_AUTH_PROVIDER_API_BASE_URL', defaultValue: 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal', description: 'The URL of service auth provider'),
                string(name: 'CCD_DATA_STORE_URL', defaultValue: 'http://ccd-data-store-api-aat.service.core-compute-aat.internal', description: 'The URL of ccd data store')
                string(name: 'CLAIM_STORE_URL', defaultValue: 'http://cmc-claim-store-aat.service.core-compute-aat.internal', description: 'Claim store url')
        ])
])

@Library("Infrastructure") _

String product = "cmc"
String component = "ccd-e2e-tests"

def secrets = [
  'cmc-aat': [
    secret('cmc-caseworker-test-username', 'CW_USER_EMAIL'),
    secret('cmc-caseworker-password', 'CW_USER_PASSWORD'),
    secret('cmc-la-username', 'LA_USER_EMAIL'),
    secret('cmc-la-password', 'LA_USER_PASSWORD'),
    secret('cmc-judge-username', 'JUDGE_USER_EMAIL'),
    secret('cmc-judge-password', 'JUDGE_USER_PASSWORD'),
    secret('citizen-username', 'CITIZEN_USER_EMAIL'),
    secret('citizen-password', 'CITIZEN_USER_PASSWORD'),
    secret('s2s-microservicekey-cmc', 'S2S_MICROSERVICE_KEY_CMC'),
    secret('cmc-s2s-secret', 'S2S_MICROSERVICE_KEY_PWD'),
    secret('launchDarkly-sdk-key', 'LAUNCHDARKLY_KEY')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withNightlyPipeline("nodejs", product, component) {
    env.TEST_E2E_URL = params.ExUI_URL_TO_TEST
    env.TEST_FRONT_END_URL = params.CMC_URL_TO_TEST
    env.DM_STORE_URL=params.DM_STORE_URL
    env.IDAM_API_URL=params.IDAM_API_URL
    env.SERVICE_AUTH_PROVIDER_API_BASE_URL = params.SERVICE_AUTH_PROVIDER_API_BASE_URL
    env.CCD_DATA_STORE_URL = params.CCD_DATA_STORE_URL
    env.CLAIM_STORE_URL = params.CLAIM_STORE_URL
    env.TEST_ENV = params.ENVIRONMENT
    loadVaultSecrets(secrets)
    enableFullFunctionalTest(120)
    
    enableCrossBrowserTest(['chrome', 'firefox', 'safari', 'microsoft'])
    
    after('fullFunctionalTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
    }

    after('crossBrowserTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
    }
}
